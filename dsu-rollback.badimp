struct dsu_rollback {
	ll n;
	vector<ll> par, sz;
	vector<ll> stack;

	dsu_rollback() : dsu_rollback(0) {}

	dsu_rollback(ll n) : n(n), par(n, 0), sz(n, 1) {
		iota(all(par), 0);
	};

	ll find(ll a) {
		while (a != par[a]) a = par[a];
		return a;
	}

	void onion(ll a, ll b) {
		a = find(a), b = find(b);
		if (a == b) {
			stack.push_back(-1);
			return;
		}

		if (sz[a] < sz[b]) swap(a, b);
		par[b] = a;
		sz[a] += sz[b];
		stack.push_back(b);
	}

	void rollback(ll num_edges) {
		while (stack.size() > num_edges) {
			auto g = stack.back();
			stack.pop_back();

			if (g != -1) {
				int c = par[g];
				for (; c != par[c]; c = par[c]) {
					sz[c] -= sz[g];
				} sz[c] -= sz[g];
				par[g] = g;
			}
		}
	}
};