// Supports flow with lower bounds too
struct Dinic
{
    struct Edge
    {
        int to, cap, flow, rev;
    };
    vector<Edge> G[MAXN];
    int cur[MAXN], dis[MAXN], cnt[MAXN], n, s, t;
    int dfs(int u, int cap)
    {
        if (!cap || u == t)
            return cap;
        for (int &i = cur[u]; i < SZ(G[u]);)
        {
            auto &e = G[u][i++];
            if (dis[e.to] == dis[u] + 1 && e.cap != e.flow)
            {
                int df = dfs(e.to, min(cap, e.cap - e.flow));
                if (df)
                {
                    e.flow += df;
                    G[e.to][e.rev].flow -= df;
                    return df;
                }
            }
        }
        dis[u] = -1;
        return 0;
    }
    bool bfs()
    {
        fill_n(dis, n + 3, -1);
        queue<int> q;
        q.push(s), dis[s] = 0;
        while (!q.empty())
        {
            int u = q.front();
            q.pop();
            for (auto e : G[u])
                if (dis[e.to] == -1 && e.cap != e.flow)
                    q.push(e.to), dis[e.to] = dis[u] + 1;
        }
        return dis[t] != -1;
    }
    int maxflow(int _s, int _t)
    {
        s = _s, t = _t;
        int flow = 0, df;
        while (bfs())
        {
            fill_n(cur, n + 3, 0);
            while ((df = dfs(s, INF)))
                flow += df;
        }
        return flow;
    }
    void init(int _n)
    {
        n = _n;
        for (int i = 0; i < n + 2; ++i)
            G[i].clear(), cnt[i] = 0;
    }
    void add_edge(int u, int v, int cap)
    {
        G[u].pb(Edge{v, cap, 0, SZ(G[v])});
        G[v].pb(Edge{u, 0, 0, SZ(G[v]) - 1});
    }
    void add_edge(int u, int v, int lcap, int rcap)
    {
        cnt[u] -= lcap, cnt[v] += lcap;
        G[u].pb(Edge{v, rcap, lcap, SZ(G[v])});
        G[v].pb(Edge{u, 0, 0, SZ(G[u]) - 1});
    }
    bool solve()
    {
        int sum = 0;
        for (int i = 0; i < n; ++i)
            if (cnt[i] > 0)
                add_edge(n + 1, i, cnt[i]), sum += cnt[i];
            else if (cnt[i] < 0)
                add_edge(i, n + 2, -cnt[i]);
        if (sum != maxflow(n + 1, n + 2))
            sum = -1;
        for (int i = 0; i < n; ++i)
            if (cnt[i] > 0)
                G[n + 1].pop_back(), G[i].pop_back();
            else if (cnt[i] < 0)
                G[i].pop_back(), G[n + 2].pop_back();
        return sum != -1;
    }
    int solve(int _s, int _t)
    {
        add_edge(_t, _s, INF);
        if (!solve())
            return -1;
        int x = G[_t].back().flow;
        return G[_t].pop_back(), G[_s].pop_back(), x;
    }
};